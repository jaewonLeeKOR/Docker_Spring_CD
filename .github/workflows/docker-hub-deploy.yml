name: Docker Hub Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}:latest .

      - name: Dockerhub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN_READ_WRITE }}

      - name: Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{secrets.DOCKERHUB_IMAGENAME}}:latest

      - name: Copy docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml, env/*"
          target: /home/ubuntu

      - name: Check Docker
        id: dockerChecker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker --version
            docker-compose --version

      - name: Install Docker
        if: ${{ failure() && steps.dockerChecker.conclusion == 'failure' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo apt-get update
            sudo apt-get install docker.io
            sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker

      - name: Deploy
        if: ${{ always() }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN_READ_ONLY }}
            docker-compose --env-file=.env -f docker-compose.yml -p backend up -d
            docker container prune -f # 실행중이지 않은 컨테이너를 모두 종료시킴
            docker image prune -a -f # 사용중이지 않은 이미지르 모두 삭제시킴